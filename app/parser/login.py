from loguru import logger
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


def login_to_platform(url, username, password, driver):
    logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {url}")
    try:
        driver.get(url)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {url}: {e}")
        raise

    wait = WebDriverWait(driver, timeout=30)

    logger.info("üîó –û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–í–æ–π—Ç–∏'")
    try:
        login_button = wait.until(EC.element_to_be_clickable((By.ID, "login_link_id")))
        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º")
        login_button.click()
    except Exception as e:
        logger.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞: {e}")
        raise

    logger.info("‚å®Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è")
    try:
        username_field = wait.until(
            EC.presence_of_element_located((By.NAME, "username"))
        )
        password_field = wait.until(
            EC.presence_of_element_located((By.NAME, "password"))
        )
        logger.info("‚úÖ –ü–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã, –≤–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ")
        username_field.send_keys(username)
        password_field.send_keys(password)
        password_field.send_keys(Keys.RETURN)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è: {e}")
        raise

    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥")
    try:
        wait.until(lambda d: d.current_url.startswith(f"{url}/web/auth/dashboard"))
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –¢–µ–∫—É—â–∏–π URL: {driver.current_url}")
        logger.info(f"ü™ß –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {driver.title}")
    except Exception as e:
        logger.exception(f"‚ùå –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥: {e}")
        raise

    return driver
