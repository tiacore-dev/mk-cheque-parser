# utils/helpers.py

import re

from loguru import logger
from selenium import webdriver
from selenium.common.exceptions import (
    ElementClickInterceptedException,
    ElementNotInteractableException,
    StaleElementReferenceException,
    TimeoutException,
)
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

from app.parser.decorators import retry_on_stale


def clean_html(html):
    """
    –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ </div> –≤–Ω—É—Ç—Ä–∏ <td>, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
    """
    cleaned_html = re.sub(r"</div>\s*</td>", "</td>", html, flags=re.IGNORECASE)
    return cleaned_html


def create_firefox_driver():
    logger.info("üöó –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Firefox –¥—Ä–∞–π–≤–µ—Ä–∞")
    try:
        options = Options()
        options.add_argument("-headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")

        driver = webdriver.Firefox(options=options)
        logger.info("‚úÖ Firefox –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        return driver
    except Exception as e:
        logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ Firefox: {e}")
        raise


def safe_click(driver, xpath, description="—ç–ª–µ–º–µ–Ω—Ç"):
    wait = WebDriverWait(driver, 20)
    for attempt in range(5):
        try:
            logger.info(f"–ö–ª–∏–∫–∞–µ–º –ø–æ {description} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            element = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))

            driver.execute_script(
                "arguments[0].scrollIntoView({block: 'center', inline: 'center'});",
                element,
            )

            element.click()
            return

        except (StaleElementReferenceException, ElementClickInterceptedException) as e:
            logger.warning(
                f"{description} –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç, –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑: {e}"
            )
            continue

        except ElementNotInteractableException as e:
            logger.warning(
                f"{description} –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç), –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ JS: {e}"
            )
            try:
                driver.execute_script("arguments[0].click();", element)
                return
            except Exception as js_e:
                logger.error(
                    f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ {description} –¥–∞–∂–µ —á–µ—Ä–µ–∑ JS: {js_e}"
                )
                continue

    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ {description} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫")


@retry_on_stale()
def safe_click_element(driver, element_or_xpath, description="—ç–ª–µ–º–µ–Ω—Ç"):
    wait = WebDriverWait(driver, 20)

    try:
        if isinstance(element_or_xpath, str):
            element = wait.until(
                EC.presence_of_element_located((By.XPATH, element_or_xpath))
            )
        else:
            element = element_or_xpath

        driver.execute_script("arguments[0].click();", element)
        logger.info(f"–ö–ª–∏–∫ –ø–æ {description} –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ JS")
        return

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ {description} —á–µ—Ä–µ–∑ JS: {e}")
        raise


@retry_on_stale()
def close_modal(driver):
    xpath = (
        "//div[@id='common-modal-content']"
        "//button[contains(@class, 'close') and @type='button']"
    )

    try:
        safe_click_element(driver, xpath, description="–∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏")

        WebDriverWait(driver, 10).until(
            EC.invisibility_of_element_located((By.ID, "common-modal-content"))
        )
        # logger.info("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É: {e}")
        raise


def wait_modal_disappear(driver):
    for desc, locator in [
        ("–º–æ–¥–∞–ª–∫–∏", (By.ID, "common-modal-content")),
        ("–∑–∞—Ç–µ–º–Ω—è—é—â–µ–≥–æ —Ñ–æ–Ω–∞", (By.CLASS_NAME, "modal-backdrop")),
    ]:
        try:
            WebDriverWait(driver, 10).until(EC.invisibility_of_element_located(locator))
        except TimeoutException:
            logger.info(f"{desc.capitalize()} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–ª–∏ —É–∂–µ —Å–∫—Ä—ã—Ç–æ")
